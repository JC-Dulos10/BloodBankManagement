/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 * LICENSE MO ULO MO HAHAHAHHAHAHAHAHHAHA - Altheo Saquilayan
 */
package models;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import controller.errorcheck;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Logger;

import view.Display;

/**
 *
 * @author JC
 * @author hotdog
 * @author chisdog
 * @author corndog
 * @author hungarian_sausage mhhmm
 * 
 */

public class Accounts extends javax.swing.JFrame implements DBOperations,Display{

    /**
     * Creates new form category
     */
    
    String lname;
    String isAdmin;
    String pass;
    int userID;
    int bloodBank_id;
    
    public Accounts() {
        initComponents();
        getContentPane().setBackground(new Color(236, 239, 241)); 
        table_update();
        VerificationLine1.setForeground(Color.red);
        VerificationLine2.setForeground(Color.red);
        VerificationLine3.setForeground(Color.red);
        jLabel1.setForeground(Color.red);
    }

    public Accounts(String name, String isAdmin, String pass, int bloodBank_id){
        initComponents();
        this.bloodBank_id = bloodBank_id;
        this.lname = name;
        this.isAdmin = isAdmin;
        this.pass = pass;
        table_update();
        getId();
        getContentPane().setBackground(new Color(236, 239, 241));   
           jTable1.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
           jTable1.getTableHeader().setOpaque(false);
           jTable1.getTableHeader().setBackground(new Color(32,136,203));
           jTable1.getTableHeader().setBackground(new Color(255,255,255));
           jTable1.setRowHeight(25);
           VerificationLine1.setForeground(Color.red);
           VerificationLine2.setForeground(Color.red);
           VerificationLine3.setForeground(Color.red);
           jLabel1.setForeground(Color.red);
    }    
    
    DefaultTableModel model = new DefaultTableModel();

    
    
    
    
    public void getId(){
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(GET_ID);
            ptsmnt.setString(1, lname);
            ptsmnt.setString(2, pass);
            ptsmnt.setInt(3, bloodBank_id);
            rs = ptsmnt.executeQuery();
            while(rs.next()){
                userID = rs.getInt("id");
            }
            conl.close();
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this,SYS_ERROR);
            Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void edithistory(String action, int id){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(DATE_TIME);
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(INSERT_HISTORY_ACCOUNTS);
            ptsmnt.setInt(1, id);
            ptsmnt.setString(2, action);
            ptsmnt.setString(3, date);
            ptsmnt.setInt(4, userID);
            ptsmnt.setInt(5, bloodBank_id);
            ptsmnt.executeUpdate();      
            conl.close();
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this,SYS_ERROR);
                Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        packTypeLink = new javax.swing.JLabel();
        exitLink = new javax.swing.JLabel();
        donorLink = new javax.swing.JLabel();
        bloodPackLink = new javax.swing.JLabel();
        EditHistoryLink = new javax.swing.JLabel();
        adminLink = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        viewAllBloodBankLink = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtstatus = new javax.swing.JComboBox<>();
        add_button = new javax.swing.JButton();
        edit_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtuser = new javax.swing.JTextField();
        txtpass = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        txtisadmin = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        showPassword = new javax.swing.JCheckBox();
        txtConfirmPass = new javax.swing.JPasswordField();
        jLabel16 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        VerificationLine1 = new javax.swing.JLabel();
        VerificationLine2 = new javax.swing.JLabel();
        VerificationLine3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(38, 166, 154));

        packTypeLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        packTypeLink.setForeground(new java.awt.Color(255, 255, 255));
        packTypeLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_product_30px_1.png"))); // NOI18N
        packTypeLink.setText("Pack Type");
        packTypeLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                packTypeLinkMouseClicked(evt);
            }
        });

        exitLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        exitLink.setForeground(new java.awt.Color(255, 255, 255));
        exitLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_exit_30px.png"))); // NOI18N
        exitLink.setText("Exit");
        exitLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLinkMouseClicked(evt);
            }
        });

        donorLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        donorLink.setForeground(new java.awt.Color(255, 255, 255));
        donorLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_people_30px_1.png"))); // NOI18N
        donorLink.setText("Donor");
        donorLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                donorLinkMouseClicked(evt);
            }
        });

        bloodPackLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        bloodPackLink.setForeground(new java.awt.Color(255, 255, 255));
        bloodPackLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_rh+_30px.png"))); // NOI18N
        bloodPackLink.setText("Blood Pack");
        bloodPackLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bloodPackLinkMouseClicked(evt);
            }
        });

        EditHistoryLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        EditHistoryLink.setForeground(new java.awt.Color(255, 255, 255));
        EditHistoryLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_edit_property_30px.png"))); // NOI18N
        EditHistoryLink.setText("Edit History");
        EditHistoryLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditHistoryLinkMouseClicked(evt);
            }
        });

        adminLink.setBackground(new java.awt.Color(0, 137, 123));
        adminLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        adminLink.setForeground(new java.awt.Color(255, 255, 255));
        adminLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_admin_settings_male_30px.png"))); // NOI18N
        adminLink.setText("Admin");
        adminLink.setOpaque(true);
        adminLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminLinkMouseClicked(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_welfare_70px.png"))); // NOI18N
        jLabel13.setText("jLabel13");

        viewAllBloodBankLink.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        viewAllBloodBankLink.setForeground(new java.awt.Color(255, 255, 255));
        viewAllBloodBankLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_product_30px_1.png"))); // NOI18N
        viewAllBloodBankLink.setText("View Blood Banks");
        viewAllBloodBankLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewAllBloodBankLinkMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(adminLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EditHistoryLink)
                .addGap(34, 34, 34))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(exitLink))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(packTypeLink))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(donorLink))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bloodPackLink))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(viewAllBloodBankLink)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(packTypeLink)
                .addGap(28, 28, 28)
                .addComponent(donorLink)
                .addGap(35, 35, 35)
                .addComponent(bloodPackLink)
                .addGap(36, 36, 36)
                .addComponent(EditHistoryLink)
                .addGap(30, 30, 30)
                .addComponent(adminLink, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewAllBloodBankLink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitLink)
                .addGap(25, 25, 25))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("User Name");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Status");

        txtstatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Suspended", " " }));

        add_button.setBackground(new java.awt.Color(204, 204, 204));
        add_button.setText("Add");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        edit_button.setBackground(new java.awt.Color(204, 204, 204));
        edit_button.setText("Update");
        edit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_buttonActionPerformed(evt);
            }
        });

        delete_button.setBackground(new java.awt.Color(204, 204, 204));
        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Password");

        txtuser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtuserActionPerformed(evt);
            }
        });
        txtuser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtuserKeyReleased(evt);
            }
        });

        txtpass.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpassActionPerformed(evt);
            }
        });
        txtpass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpassKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpassKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("isAdmin");

        txtisadmin.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtisadmin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        jLabel14.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Accounts");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Manage and modify accounts");

        showPassword.setText("Show Password");
        showPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showPasswordMouseClicked(evt);
            }
        });
        showPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordActionPerformed(evt);
            }
        });

        txtConfirmPass.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtConfirmPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConfirmPassActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Confirm Password:");

        jLabel1.setForeground(java.awt.Color.red);
        jLabel1.setText("Username must have at least 8 characters");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Password must have:");

        VerificationLine1.setForeground(java.awt.Color.red);
        VerificationLine1.setText("At least 12 characters");

        VerificationLine2.setForeground(java.awt.Color.red);
        VerificationLine2.setText("At least one uppercase Letter[A-Z]");

        VerificationLine3.setForeground(java.awt.Color.red);
        VerificationLine3.setText("At least one numeral[0-9]");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(txtConfirmPass))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel15))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel10))
                                .addGap(69, 69, 69)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtisadmin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtstatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 31, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(add_button)
                        .addGap(18, 18, 18)
                        .addComponent(edit_button)
                        .addGap(18, 18, 18)
                        .addComponent(delete_button)
                        .addGap(69, 69, 69))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(69, 69, 69)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtpass)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(VerificationLine2)
                                            .addComponent(VerificationLine1)
                                            .addComponent(VerificationLine3))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(showPassword)
                                        .addGap(14, 14, 14))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VerificationLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VerificationLine2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VerificationLine3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConfirmPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtisadmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete_button)
                    .addComponent(edit_button)
                    .addComponent(add_button))
                .addGap(31, 31, 31))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Status", "isAdmin"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        refreshButton.setBackground(new java.awt.Color(204, 204, 204));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_crown_45px.png"))); // NOI18N
        jLabel8.setText("yormesoftware™");
        jLabel8.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(309, 309, 309)
                                .addComponent(refreshButton)
                                .addGap(10, 10, 10))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(refreshButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_update(){
        try {
            int c;
            try {
                Connection conl = createConnection();
                PreparedStatement ptsmnt;
                ResultSet rs;
                ptsmnt = conl.prepareStatement(UPDATE_TABLE_ACCOUNTS);
                ptsmnt.setInt(1, bloodBank_id);
                rs = ptsmnt.executeQuery();
                
                ResultSetMetaData rsd = rs.getMetaData();
                c = rsd.getColumnCount();
                
                DefaultTableModel d = (DefaultTableModel)jTable1.getModel();
                d.setRowCount(0);
                
                
                while(rs.next()){
                    Vector v2 = new Vector();
                    
                    for(int i=1; i<=c; i++){
                       v2.add(rs.getString("id"));
                       v2.add(rs.getString("account_name"));
                       v2.add(rs.getString("status"));
                       v2.add(rs.getString("isAdmin"));
                    }
                    
                    d.addRow(v2);
                }
                
                conl.close();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,SYS_ERROR);
            }
             
        } catch (SQLException ex) {
            Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,SYS_ERROR);
        }
        
        
    
    
    
    
    }
    
    public int countAdmin(){
        int count = 0;
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(GET_ADMIN_COUNT);
            ptsmnt.setString(1, "Yes");
            ptsmnt.setInt(2, bloodBank_id);
            rs = ptsmnt.executeQuery();
            rs.next();
            count = rs.getInt(1);
            conl.close();
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this,SYS_ERROR);
            Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        return count;
    }
    
    
    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        
        errorcheck err = new errorcheck();// Calls the error and restriction method
        String test= "12";
        String user = txtuser.getText();
        String pass = txtpass.getText();
        String pass2 = txtConfirmPass.getText();
        String status = txtstatus.getSelectedItem().toString();
        String isAdmin =txtisadmin.getSelectedItem().toString();
        
        boolean isSelectedAdmin = false;
        
        
        int generatedID = 0;
        int count = countAdmin();
        
        if(pass.equals(pass2) == false){
            JOptionPane.showMessageDialog(this, PASS_CONFIRMED_WRONG);
        } else {
        
        if(count >= 5 && isAdmin.equalsIgnoreCase("Yes")){
            JOptionPane.showMessageDialog(this, CANNOT_ADD);
        } else {
                try {
                    Connection conl = createConnection();
                    PreparedStatement ptsmnt;
                    ResultSet rs;
                    ptsmnt = conl.prepareStatement(INSERT_ACCOUNT, Statement.RETURN_GENERATED_KEYS);
                    ptsmnt.setString(1, user);


                   //If input String value is empty
                    if(err.isEmpty(user) == true){
                        JOptionPane.showMessageDialog(this, NOT_EMPTY);
                        txtuser.requestFocus();
                    }
                    //If input contains illegal characters that are not good for databases
                    else if(err.isContainIllegalChar(user) == true){
                        JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                        txtuser.requestFocus();
                    }
                    //If input is number only
                    else if(err.numberOrNot(user)== true){
                       JOptionPane.showMessageDialog(null, NAME_NUM);
                       txtuser.requestFocus();
                    }
                    //UNUSED ACCORDING TO SPECIFICATIONS
//                    //If input does no contain a letter
//                    else if(err.isAlpha(user)== true){
//                        JOptionPane.showMessageDialog(null, NO_LETTER);
//                    }
                    
                    //If input username first text is number
                    else if(err.firstNumberOrNot(user) == true){
                        JOptionPane.showMessageDialog(this, FIRST_NOT_NUM);
                        txtuser.requestFocus();
                    }
                    //If input has whitespace
                    else if(err.CheckWhiteSpace(user) == true){
                        JOptionPane.showMessageDialog(this, NO_SPACE);
                        txtuser.requestFocus();
                    }
                    //If input has less than eight of characters
                    else if(err.CharMinEight(user) == true){
                        JOptionPane.showMessageDialog(this, MIN_EIGHT);
                        txtuser.requestFocus();
                    }


                    else{
                            ptsmnt.setString(2, pass);

                            //If input String value is empty
                            if(err.isEmpty(pass) == true){
                                JOptionPane.showMessageDialog(this, NOT_EMPTY);
                                txtpass.requestFocus();
                            }
                            //If input is number only
                            else if(err.numberOrNot(pass)== true){
                               JOptionPane.showMessageDialog(null, NAME_NUM);
                               txtuser.requestFocus();
                            }
                            // If Password contains illegal characters
                            else if(err.isContainIllegalChar(pass) == true){
                                JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                                txtpass.requestFocus();
                             }
                             //If Password contains whitespace
                             else if(err.CheckWhiteSpace(pass) == true){
                                 JOptionPane.showMessageDialog(this, NO_SPACE);
                                 txtpass.requestFocus();
                             }
                             //If Input is less than 8 characters
                             else if(err.CharMinEight(pass) == true){
                                 JOptionPane.showMessageDialog(this,MIN_TWELVE);
                                 txtpass.requestFocus();
                             }
                             //If input does not contain one uppercase and one number
                             else if(err.checkInput(pass) == true){
                                 JOptionPane.showMessageDialog(this,ONE_NUM_ONE_UP);
                                 txtpass.requestFocus();
                             }
                             else{
                                ptsmnt.setString(3, status);
                                ptsmnt.setString(4, isAdmin);
                                ptsmnt.setInt(5, bloodBank_id);
                                ptsmnt.executeUpdate();
                                ResultSet generatedKeyResult = ptsmnt.getGeneratedKeys();
                                if(generatedKeyResult.next()){
                                    generatedID = generatedKeyResult.getInt(1);
                                }
                                JOptionPane.showMessageDialog(this, USER_ADDED);
                                table_update();
                                edithistory(ID_ADDED, generatedID);
                                conl.close();
                                txtuser.setText("");
                                txtpass.setText("");
                                txtConfirmPass.setText("");
                                txtuser.requestFocus();  
                             }
                    }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this,SYS_ERROR);
                Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
            }
        }    
        
        }
    }//GEN-LAST:event_add_buttonActionPerformed

    private void edit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_buttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1. getSelectedRow();
        
        
        errorcheck err = new errorcheck();// Calls the error and restriction methods 
        
        int id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString());
        String user = txtuser.getText();
        String pass = txtpass.getText();   
        String status = txtstatus.getSelectedItem().toString();
        String isAdmin =txtisadmin.getSelectedItem().toString();
        
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(UPDATE_ACCOUNT);
            ptsmnt.setString(1, user);
            
            
            //If input String value is empty
            if(err.isEmpty(user) == true){
                JOptionPane.showMessageDialog(this, NOT_EMPTY);
                txtuser.requestFocus();
            }
            //If input contains illegal characters that are not good for databases
            else if(err.isContainIllegalChar(user) == true){
                JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                txtuser.requestFocus();
            }
            //If input is number only
            else if(err.numberOrNot(user)== true){
               JOptionPane.showMessageDialog(this, NAME_NUM);
               txtuser.requestFocus();
            }
            //If input username first text is number
            else if(err.firstNumberOrNot(user) == true){
                JOptionPane.showMessageDialog(this, FIRST_NOT_NUM);
                txtuser.requestFocus();
            }
            //If input has whitespace
            else if(err.CheckWhiteSpace(user) == true){
                JOptionPane.showMessageDialog(this, NO_SPACE);
                txtuser.requestFocus();
            }
            //If input has less than eight of characters
            else if(err.CharMinEight(user) == true){
                JOptionPane.showMessageDialog(this, MIN_EIGHT);
                txtuser.requestFocus();
            }
            else{
                ptsmnt.setString(2, pass);
                

                //If input String value is empty
                if(err.isEmpty(pass) == true){
                    JOptionPane.showMessageDialog(this, NOT_EMPTY);
                    txtpass.requestFocus();
                }
                // If Password contains illegal characters
                else if(err.isContainIllegalChar(pass) == true){
                   JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                   txtpass.requestFocus();
                }
                //If Password contains whitespace
                else if(err.CheckWhiteSpace(pass) == true){
                    JOptionPane.showMessageDialog(this, NO_SPACE);
                    txtpass.requestFocus();
                }
                //If Input is less than 12 characters
                else if(err.CharMinTwelve(pass) == true){
                    JOptionPane.showMessageDialog(this,MIN_TWELVE);
                    txtpass.requestFocus();
                }
                //If input does not contain one uppercase and one number
                else if(err.checkInput(pass) == false){
                    JOptionPane.showMessageDialog(this,ONE_NUM_ONE_UP);
                    txtpass.requestFocus();
                }
                else{
                    ptsmnt.setString(3, status);
                    ptsmnt.setString(4, isAdmin);
                    ptsmnt.setInt(5, id);
                    ptsmnt.setInt(6, bloodBank_id);
                    ptsmnt.executeUpdate();
                    JOptionPane.showMessageDialog(this, UPDATE_ACCT);
                    table_update();
                    edithistory(UPDATE_ID, id);
                    add_button.setEnabled(true);
                    txtuser.setText("");
                    txtpass.setText("");
                    txtpass.requestFocus();
                    conl.close();
                }
                
              
            }
           
        } catch (ClassNotFoundException | SQLException ex) {
           JOptionPane.showMessageDialog(this,SYS_ERROR);
           Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_edit_buttonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
         add_button.setEnabled(false);
         DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
         int selectIndex = jTable1.getSelectedRow();        
         txtuser.setText(d1.getValueAt(selectIndex, 1).toString());
         int id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString());
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            
            ptsmnt = conl.prepareStatement(GET_PASS);
            ptsmnt.setInt(1, id);
            ptsmnt.setInt(2, bloodBank_id);
            rs = ptsmnt.executeQuery();
            while(rs.next()){
                txtpass.setText(rs.getString("password"));
            }
            conl.close();
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this,SYS_ERROR);
            Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
        }
         txtstatus.setSelectedItem(d1.getValueAt(selectIndex, 2).toString());
         txtisadmin.setSelectedItem(d1.getValueAt(selectIndex, 3).toString());
         
         
         
    }//GEN-LAST:event_jTable1MouseClicked

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1. getSelectedRow();
        
        int id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString());
        
        int dialogResult = JOptionPane.showConfirmDialog(this, DELETE_RECORD, "Warning",JOptionPane.YES_NO_OPTION);
        
        if(dialogResult == JOptionPane.YES_OPTION){
            
           try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(DELETE_ACCOUNT);
            ptsmnt.setInt(1, id);
            ptsmnt.setInt(2, bloodBank_id);
            ptsmnt.executeUpdate();
            JOptionPane.showMessageDialog(this, ACCT_DELETED);
            table_update();
            edithistory(ACCT_ID_DELETED,  id);   
            add_button.setEnabled(true);
            txtuser.setText("");
            txtpass.setText("");
            txtuser.requestFocus();
            conl.close();
           } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this,SYS_ERROR);
                Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
           }
            
        }
        
           
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void packTypeLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_packTypeLinkMouseClicked
        // TODO add your handling code here:
        this.dispose();
        new PackType(lname,isAdmin,pass,bloodBank_id).setVisible(true);   
    }//GEN-LAST:event_packTypeLinkMouseClicked

    private void donorLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_donorLinkMouseClicked
        // TODO add your handling code here:
       this.dispose();
       new Donor(lname,isAdmin,pass,bloodBank_id).setVisible(true);
    }//GEN-LAST:event_donorLinkMouseClicked

    private void bloodPackLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bloodPackLinkMouseClicked
        // TODO add your handling code here:
        this.dispose();
        new BloodPack(lname,isAdmin,pass,bloodBank_id).setVisible(true);
    }//GEN-LAST:event_bloodPackLinkMouseClicked

    private void EditHistoryLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditHistoryLinkMouseClicked
        // TODO add your handling code here:
        this.dispose();
        new EditHistory(lname,isAdmin,pass,bloodBank_id).setVisible(true);
    }//GEN-LAST:event_EditHistoryLinkMouseClicked

    private void adminLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLinkMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_adminLinkMouseClicked

    private void exitLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLinkMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitLinkMouseClicked

    private void txtuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtuserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtuserActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        add_button.setEnabled(true);
        txtuser.setText("");
        txtpass.setText("");
        txtConfirmPass.setText("");
        txtuser.requestFocus();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void viewAllBloodBankLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewAllBloodBankLinkMouseClicked
        // TODO add your handling code here:
        this.hide();
        new ViewAll(lname, isAdmin, pass, bloodBank_id).setVisible(true);
    }//GEN-LAST:event_viewAllBloodBankLinkMouseClicked

    private void showPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showPasswordActionPerformed

    private void showPasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPasswordMouseClicked
        if(showPassword.isSelected() == true){
            txtpass.setEchoChar((char)0);
            txtConfirmPass.setEchoChar((char)0);
        }else{
            txtpass.setEchoChar('*');
            txtConfirmPass.setEchoChar('*');
        }
    }//GEN-LAST:event_showPasswordMouseClicked

    private void txtpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpassActionPerformed

    private void txtConfirmPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConfirmPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConfirmPassActionPerformed

    private void txtpassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpassKeyPressed
        
    }//GEN-LAST:event_txtpassKeyPressed

    private void txtpassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpassKeyReleased
        errorcheck err = new errorcheck();
        String passCheck = txtpass.getText();
        
        //If char is not greater then 12
        if(err.CharMinTwelve(passCheck) == false){
            VerificationLine1.setForeground(Color.gray);
        } else if(err.CharMinTwelve(passCheck) == true){
            VerificationLine1.setForeground(Color.red);
        } 
        
        //If input does not contain uppercase
        if(err.atleastOneUppercase(passCheck) == true){
            VerificationLine2.setForeground(Color.gray);
        } else if(err.atleastOneUppercase(passCheck) == false){
            VerificationLine2.setForeground(Color.red);
        }
        
        //if input does not contain one numerical
        if(err.atleastOneNumerical(passCheck) == true){
            VerificationLine3.setForeground(Color.gray);
        } else if(err.atleastOneNumerical(passCheck) == false){
            VerificationLine3.setForeground(Color.red);
        }
        
    }//GEN-LAST:event_txtpassKeyReleased

    private void txtuserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtuserKeyReleased
        // TODO add your handling code here:
        errorcheck err = new errorcheck();
        String user = txtuser.getText();
        if(err.CharMinEight(user) == false){
            jLabel1.setForeground(Color.gray);
        } else if(err.CharMinEight(user)){
            jLabel1.setForeground(Color.red);
        }
    }//GEN-LAST:event_txtuserKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accounts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Accounts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EditHistoryLink;
    private javax.swing.JLabel VerificationLine1;
    private javax.swing.JLabel VerificationLine2;
    private javax.swing.JLabel VerificationLine3;
    private javax.swing.JButton add_button;
    private javax.swing.JLabel adminLink;
    private javax.swing.JLabel bloodPackLink;
    private javax.swing.JButton delete_button;
    private javax.swing.JLabel donorLink;
    private javax.swing.JButton edit_button;
    private javax.swing.JLabel exitLink;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel packTypeLink;
    private javax.swing.JButton refreshButton;
    private javax.swing.JCheckBox showPassword;
    private javax.swing.JPasswordField txtConfirmPass;
    private javax.swing.JComboBox<String> txtisadmin;
    private javax.swing.JPasswordField txtpass;
    private javax.swing.JComboBox<String> txtstatus;
    private javax.swing.JTextField txtuser;
    private javax.swing.JLabel viewAllBloodBankLink;
    // End of variables declaration//GEN-END:variables

    @Override
    public Connection createConnection() throws ClassNotFoundException, SQLException {
        Connection connection = null;
        //enroll the Oracle MySql JDBC Driver
	Class.forName(JDBC_DRIVER_NAME);
	//create or get a Connection
	connection = DriverManager.getConnection(JDBC_URL,DB_USER_NAME, DB_PASSWORD);
	if (connection != null) {
            
	} else {
            JOptionPane.showMessageDialog(this, DB_INVALID);
	}
	return connection;
    }
}






