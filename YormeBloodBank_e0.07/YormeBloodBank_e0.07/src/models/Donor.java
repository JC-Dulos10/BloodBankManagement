/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package models;


import controller.login;
import com.mysql.jdbc.Statement;
import controller.errorcheck;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import view.Display;

/**
 *
 * @author JC
 */
public class Donor extends javax.swing.JFrame implements DBOperations, Display{

    /**
     * Creates new form category
     */
    public Donor() {
        initComponents();
        table_update();
        
         getContentPane().setBackground(new Color(236, 239, 241)); 
    }

    
    String lname;
    String isAdmin;
    String pass;
    int userID;
    int bloodBank_id;
    
    public Donor(String name, String isAdmin, String pass, int bloodBank_id) {
        initComponents();
        this.bloodBank_id = bloodBank_id;
        this.lname = name;
        this.isAdmin = isAdmin;  
        this.pass = pass;
        getId();
        table_update();
        
         getContentPane().setBackground(new Color(236, 239, 241)); 
    }
    
    
    
    public void getId(){
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(GET_ID);
            ptsmnt.setString(1, lname);
            ptsmnt.setString(2, pass);
            ptsmnt.setInt(3, bloodBank_id);
            rs = ptsmnt.executeQuery();
            while(rs.next()){
                userID = rs.getInt("id");
            }
            conl.close();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,SYS_ERROR);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,SYS_ERROR);
        }
        
    }
    
    public void edithistory(String action, int id){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(DATE_TIME);
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(INSERT_HISTORY_DONOR);
            ptsmnt.setInt(1, id);
            ptsmnt.setString(2, action);
            ptsmnt.setString(3, date);
            ptsmnt.setInt(4, userID);
            ptsmnt.setInt(5, bloodBank_id);
            ptsmnt.executeUpdate();      
            conl.close();
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this,SYS_ERROR);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,SYS_ERROR);
            }
    }
    
    
    
    public boolean checkDonorExist(String name){
        String name2 = "";
        boolean decision = false;
        try {
            Connection conl = createConnection();
            PreparedStatement ptsmnt;
            ResultSet rs;
            ptsmnt = conl.prepareStatement(CHECK_NAME);
            ptsmnt.setString(1, name);
            ptsmnt.setInt(2, bloodBank_id);
            rs = ptsmnt.executeQuery();
            while(rs.next()){
                name2 = rs.getString("donorName");
            }
            if(name.equalsIgnoreCase(name2)){
                decision = true;
            }
            conl.close();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(BloodPack.class.getName()).log(Level.SEVERE, null, ex);
        }
        return decision;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        packtypeLink = new javax.swing.JLabel();
        exitLink = new javax.swing.JLabel();
        donorLink = new javax.swing.JLabel();
        bloodPackLink = new javax.swing.JLabel();
        editHistoryLink = new javax.swing.JLabel();
        adminLink = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        viewAllBloodBankLink = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtbloodtype = new javax.swing.JTextField();
        txtstatus = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtNum = new javax.swing.JTextField();
        txtAdd1 = new javax.swing.JTextField();
        txtAdd2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(38, 166, 154));

        packtypeLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        packtypeLink.setForeground(new java.awt.Color(255, 255, 255));
        packtypeLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_product_30px_1.png"))); // NOI18N
        packtypeLink.setText("Pack Type");
        packtypeLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                packtypeLinkMouseClicked(evt);
            }
        });

        exitLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        exitLink.setForeground(new java.awt.Color(255, 255, 255));
        exitLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_exit_30px.png"))); // NOI18N
        exitLink.setText("Exit");
        exitLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLinkMouseClicked(evt);
            }
        });

        donorLink.setBackground(new java.awt.Color(0, 137, 123));
        donorLink.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        donorLink.setForeground(new java.awt.Color(255, 255, 255));
        donorLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_people_30px_1.png"))); // NOI18N
        donorLink.setText("Donor");
        donorLink.setOpaque(true);
        donorLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                donorLinkMouseClicked(evt);
            }
        });

        bloodPackLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        bloodPackLink.setForeground(new java.awt.Color(255, 255, 255));
        bloodPackLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_rh+_30px.png"))); // NOI18N
        bloodPackLink.setText("Blood Pack");
        bloodPackLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bloodPackLinkMouseClicked(evt);
            }
        });

        editHistoryLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        editHistoryLink.setForeground(new java.awt.Color(255, 255, 255));
        editHistoryLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_edit_property_30px.png"))); // NOI18N
        editHistoryLink.setText("Edit History");
        editHistoryLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editHistoryLinkMouseClicked(evt);
            }
        });

        adminLink.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        adminLink.setForeground(new java.awt.Color(255, 255, 255));
        adminLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_admin_settings_male_30px.png"))); // NOI18N
        adminLink.setText("Admin");
        adminLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminLinkMouseClicked(evt);
            }
        });

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_welfare_70px.png"))); // NOI18N
        jLabel16.setText("jLabel13");

        viewAllBloodBankLink.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        viewAllBloodBankLink.setForeground(new java.awt.Color(255, 255, 255));
        viewAllBloodBankLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_product_30px_1.png"))); // NOI18N
        viewAllBloodBankLink.setText("View Blood Banks");
        viewAllBloodBankLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewAllBloodBankLinkMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(donorLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(exitLink))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(packtypeLink))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bloodPackLink))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adminLink)
                            .addComponent(editHistoryLink)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(viewAllBloodBankLink)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(packtypeLink)
                .addGap(28, 28, 28)
                .addComponent(donorLink, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(bloodPackLink)
                .addGap(43, 43, 43)
                .addComponent(editHistoryLink)
                .addGap(48, 48, 48)
                .addComponent(adminLink)
                .addGap(43, 43, 43)
                .addComponent(viewAllBloodBankLink)
                .addGap(92, 92, 92)
                .addComponent(exitLink)
                .addGap(43, 43, 43))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Blood Type");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Status");

        txtbloodtype.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtstatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Not Active" }));

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Donor Name");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Age");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Contact No.");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Address1");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Address2");

        txtName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtAge.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtNum.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtAdd1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtAdd2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton4.setText("Refresh");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(28, 28, 28))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAdd2)
                    .addComponent(txtAdd1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtName)
                    .addComponent(txtNum)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtbloodtype, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 241, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtAdd1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(txtAdd2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtbloodtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Contact No.", "Address1", "Address2", "Age", "Blood Type", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/z-res-images/icons8_crown_45px.png"))); // NOI18N
        jLabel8.setText("yormesoftware™");
        jLabel8.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_update(){
        try {
            int c;
            try {
                Connection conl = createConnection();
                PreparedStatement ptsmnt;
                ResultSet rs;
                ptsmnt = conl.prepareStatement(UPDATE_TABLE_DONOR);
                ptsmnt.setInt(1, bloodBank_id);
                rs = ptsmnt.executeQuery();
                
                ResultSetMetaData rsd = rs.getMetaData();
                c = rsd.getColumnCount();
                
                DefaultTableModel d = (DefaultTableModel)jTable1.getModel();
                d.setRowCount(0);
                
                
                while(rs.next()){
                    Vector v2 = new Vector();
                    
                    for(int i=1; i<=c; i++){
                       v2.add(rs.getString("id"));
                       v2.add(rs.getString("donorName"));
                       v2.add(rs.getString("contactNum"));
                       v2.add(rs.getString("add1"));
                       v2.add(rs.getString("add2"));
                       v2.add(rs.getString("age"));
                       v2.add(rs.getString("bloodType"));
                       v2.add(rs.getString("status"));
                    }
                    
                    d.addRow(v2);
                }
                
                conl.close();
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this,SYS_ERROR);
                Logger.getLogger(Donor.class.getName()).log(Level.SEVERE, null, ex);
            }
             
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,SYS_ERROR);
            Logger.getLogger(Donor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        errorcheck err = new errorcheck();// Calls the error and restriction methods 
        
        if(isAdmin.equals("Yes")){
            int generatedID = 0;
            String donorName = txtName.getText();
            if(err.isEmpty(donorName)){
                JOptionPane.showMessageDialog(this, NOT_EMPTY);
                txtName.requestFocus();
            } else if(checkDonorExist(donorName)){
                JOptionPane.showMessageDialog(this, BT_EXIST);
                txtName.requestFocus();
            } else {
                String contactNum = txtNum.getText();
                if(err.isLetter(contactNum)== true){
                    JOptionPane.showMessageDialog(this, "Contact No. must be a number!!!!");
                    txtNum.requestFocus();
                } else if(err.isEmpty(contactNum)){
                    JOptionPane.showMessageDialog(this, NOT_EMPTY);
                    txtNum.requestFocus();
                } else if(err.isContainIllegalChar(contactNum) == true){
                    JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                    txtNum.requestFocus();
                } else {
                    String add1 = txtAdd1.getText();
                    if(err.isEmpty(add1)){
                        JOptionPane.showMessageDialog(this, NOT_EMPTY);
                        txtAdd1.requestFocus();
                    }  else {
                        String add2 = txtAdd2.getText();
                        String bloodType = txtbloodtype.getText();
                        if(err.isEmpty(bloodType) == true){
                            JOptionPane.showMessageDialog(this, NOT_EMPTY);
                            txtbloodtype.requestFocus();
                        }
                        else{
                            String age = txtAge.getText();
                            if(err.isLetter(age)== true){
                                JOptionPane.showMessageDialog(this, "age must be a number!!!!");
                                txtAge.requestFocus();
                            } else if(err.isEmpty(age)){
                                JOptionPane.showMessageDialog(this, NOT_EMPTY);
                                txtAge.requestFocus();
                            } else if(err.isContainIllegalChar(age) == true){
                                JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                                txtAge.requestFocus();
                            } else {
                                String status = txtstatus.getSelectedItem().toString();
                                try {
                                    Connection conl = createConnection();
                                    PreparedStatement ptsmnt;
                                    ptsmnt = conl.prepareStatement(INSERT_DONOR, Statement.RETURN_GENERATED_KEYS);
                                    ptsmnt.setString(1, donorName);
                                    ptsmnt.setString(2, contactNum);
                                    ptsmnt.setString(3, add1);
                                    ptsmnt.setString(4, add2);
                                    ptsmnt.setString(5, bloodType);
                                    //If input String value is empty
                                    ptsmnt.setString(6, age);
                                    ptsmnt.setString(7, status);
                                    ptsmnt.setInt(8, bloodBank_id);
                                    ptsmnt.executeUpdate();
                                    ResultSet generatedKeyResult = ptsmnt.getGeneratedKeys();
                                    if(generatedKeyResult.next()){
                                        generatedID = generatedKeyResult.getInt(1);
                                    }
                                    JOptionPane.showMessageDialog(this, BT_ADDED);
                                    table_update();
                                    txtAdd1.setText("");
                                    txtAdd2.setText("");
                                    txtAge.setText("");
                                    txtName.setText("");
                                    txtNum.setText(""); 
                                    txtbloodtype.setText("");
                                    txtName.requestFocus();
                                    edithistory(BT_ID_ADDED , generatedID); 
                                    conl.close();

                                } catch (ClassNotFoundException | SQLException ex) {
                                    JOptionPane.showMessageDialog(this,SYS_ERROR);
                                    Logger.getLogger(Donor.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    }        
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, ADMIN_ONLY);
            int dialogResult = JOptionPane.showConfirmDialog(this, LOGIN_AS_ADMIN, "Warning",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                login l = new  login();
                this.hide();
                l.setVisible(true);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        errorcheck err = new errorcheck();// Calls the error and restriction methods 
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1. getSelectedRow();
        int id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString());
        if(isAdmin.equals("Yes")){
            int generatedID = 0;
            String donorName = txtName.getText();
            if(err.isEmpty(donorName)){
                JOptionPane.showMessageDialog(this, NOT_EMPTY);
                txtName.requestFocus();
            } else {
                String contactNum = txtNum.getText();
                if(err.isLetter(contactNum)== true){
                    JOptionPane.showMessageDialog(this, "Contact No. must be a number!!!!");
                    txtNum.requestFocus();
                } else if(err.isEmpty(contactNum)){
                    JOptionPane.showMessageDialog(this, NOT_EMPTY);
                    txtNum.requestFocus();
                } else if(err.isContainIllegalChar(contactNum) == true){
                    JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                    txtNum.requestFocus();
                } else {
                    String add1 = txtAdd1.getText();
                    if(err.isEmpty(add1)){
                        JOptionPane.showMessageDialog(this, NOT_EMPTY);
                        txtAdd1.requestFocus();
                    }  else {
                        String add2 = txtAdd2.getText();
                        String bloodType = txtbloodtype.getText();
                        if(err.isEmpty(bloodType) == true){
                            JOptionPane.showMessageDialog(this, NOT_EMPTY);
                            txtbloodtype.requestFocus();
                        }
                        else{
                            String age = txtAge.getText();
                            if(err.isLetter(age)== true){
                                JOptionPane.showMessageDialog(this, "age must be a number!!!!");
                                txtAge.requestFocus();
                            } else if(err.isEmpty(age)){
                                JOptionPane.showMessageDialog(this, NOT_EMPTY);
                                txtAge.requestFocus();
                            } else if(err.isContainIllegalChar(age) == true){
                                JOptionPane.showMessageDialog(this, NO_ILLEGAL_CHAR);
                                txtAge.requestFocus();
                            } else {
                                String status = txtstatus.getSelectedItem().toString();
                                try {
                                    Connection conl = createConnection();
                                    PreparedStatement ptsmnt;
                                    ResultSet rs;
                                    ptsmnt = conl.prepareStatement(UPDATE_DONOR);
                                    ptsmnt.setString(1, donorName);
                                    ptsmnt.setString(2, contactNum);
                                    ptsmnt.setString(3, add1);
                                    ptsmnt.setString(4, add2);
                                    ptsmnt.setString(5, bloodType);
                                    ptsmnt.setString(6, age);
                                    ptsmnt.setString(7, status);
                                    ptsmnt.setInt(8, id);
                                    ptsmnt.setInt(9, bloodBank_id);
                                    ptsmnt.executeUpdate();
                                    JOptionPane.showMessageDialog(this, BT_UPDATED);
                                    table_update();
                                    txtAdd1.setText("");
                                    txtAdd2.setText("");
                                    txtAge.setText("");
                                    txtName.setText("");
                                    txtNum.setText(""); 
                                    txtbloodtype.setText("");
                                    txtName.requestFocus();
                                    edithistory(BT_ID_UPDATED , id); 
                                    conl.close();
                                    jButton1.setEnabled(true);

                                } catch (ClassNotFoundException | SQLException ex) {
                                    JOptionPane.showMessageDialog(this,SYS_ERROR);
                                    Logger.getLogger(Donor.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    }        
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, ADMIN_ONLY);
            int dialogResult = JOptionPane.showConfirmDialog(this, LOGIN_AS_ADMIN, "Warning",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                login l = new  login();
                this.hide();
                l.setVisible(true);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
         jButton1.setEnabled(false);
         DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
         int selectIndex = jTable1.getSelectedRow();
         txtAdd1.setText(d1.getValueAt(selectIndex, 3).toString());
         txtAdd2.setText(d1.getValueAt(selectIndex, 4).toString());
         txtAge.setText(d1.getValueAt(selectIndex, 5).toString());
         txtName.setText(d1.getValueAt(selectIndex, 1).toString());
         txtNum.setText(d1.getValueAt(selectIndex, 2).toString()); 
         txtbloodtype.setText(d1.getValueAt(selectIndex, 6).toString());
         txtstatus.setSelectedItem(d1.getValueAt(selectIndex, 7).toString());
         
         
         
         
         
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        if(isAdmin.equals("Yes")){
            DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
            int selectIndex = jTable1. getSelectedRow();

            int id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString());

            int dialogResult = JOptionPane.showConfirmDialog(this, DELETE_RECORD, "Warning",JOptionPane.YES_NO_OPTION);

            if(dialogResult == JOptionPane.YES_OPTION){

               try {
                Connection conl = createConnection();
                PreparedStatement ptsmnt;
                ResultSet rs;
                ptsmnt = conl.prepareStatement(DELETE_DONOR);
                ptsmnt.setInt(1, id);
                ptsmnt.setInt(2, bloodBank_id);
                ptsmnt.executeUpdate();
                JOptionPane.showMessageDialog(null, BT_DELETED);
                table_update();
                txtAdd1.setText("");
                txtAdd2.setText("");
                txtAge.setText("");
                txtName.setText("");
                txtNum.setText(""); 
                txtbloodtype.setText("");
                txtName.requestFocus();
                edithistory(BT_ID_DELETE, id);
                jButton1.setEnabled(true);
                conl.close();
               } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this,SYS_ERROR);
                Logger.getLogger(Donor.class.getName()).log(Level.SEVERE, null, ex);
               }

            }
        } else {
            JOptionPane.showMessageDialog(this, ADMIN_ONLY);
            int dialogResult = JOptionPane.showConfirmDialog(this, LOGIN_AS_ADMIN, "Warning",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                login l = new  login();
                this.hide();
                l.setVisible(true);
            }
        }
        
           
    }//GEN-LAST:event_jButton3ActionPerformed

    private void packtypeLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_packtypeLinkMouseClicked
        // TODO add your handling code here:
        
        this.dispose();
        new PackType(lname,isAdmin,pass,bloodBank_id).setVisible(true);
        
    }//GEN-LAST:event_packtypeLinkMouseClicked

    private void donorLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_donorLinkMouseClicked
        // TODO add your handling code here:        
    }//GEN-LAST:event_donorLinkMouseClicked

    private void bloodPackLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bloodPackLinkMouseClicked
        // TODO add your handling code here:
        
        this.dispose();
        new BloodPack(lname,isAdmin,pass,bloodBank_id).setVisible(true);
        
    }//GEN-LAST:event_bloodPackLinkMouseClicked

    private void editHistoryLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editHistoryLinkMouseClicked
        // TODO add your handling code here:
        this.dispose();
        new EditHistory(lname,isAdmin,pass,bloodBank_id).setVisible(true);
        
    }//GEN-LAST:event_editHistoryLinkMouseClicked

    private void adminLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLinkMouseClicked
        // TODO add your handling code here:
        if(isAdmin.equals("Yes")){
            this.dispose();
            new Accounts(lname,isAdmin,pass,bloodBank_id).setVisible(true);
       }  else {
           JOptionPane.showMessageDialog(this, ADMIN_ONLY);
           int dialogResult = JOptionPane.showConfirmDialog(this,LOGIN_AS_ADMIN, "Warning",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                login l = new  login();
                this.dispose();
                l.setVisible(true);
            }
       }
    }//GEN-LAST:event_adminLinkMouseClicked

    private void exitLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLinkMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitLinkMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        txtAdd1.setText("");
        txtAdd2.setText("");
        txtAge.setText("");
        txtName.setText("");
        txtNum.setText("");
        txtbloodtype.setText("");
        txtName.requestFocus();
        jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void viewAllBloodBankLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewAllBloodBankLinkMouseClicked
        // TODO add your handling code here:
        this.dispose();
        new ViewAll(lname, isAdmin, pass, bloodBank_id).setVisible(true);
    }//GEN-LAST:event_viewAllBloodBankLinkMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Donor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Donor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Donor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Donor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Donor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminLink;
    private javax.swing.JLabel bloodPackLink;
    private javax.swing.JLabel donorLink;
    private javax.swing.JLabel editHistoryLink;
    private javax.swing.JLabel exitLink;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel packtypeLink;
    private javax.swing.JTextField txtAdd1;
    private javax.swing.JTextField txtAdd2;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNum;
    private javax.swing.JTextField txtbloodtype;
    private javax.swing.JComboBox<String> txtstatus;
    private javax.swing.JLabel viewAllBloodBankLink;
    // End of variables declaration//GEN-END:variables

    @Override
    public Connection createConnection() throws ClassNotFoundException, SQLException {
        Connection connection = null;
        //enroll the Oracle MySql JDBC Driver
	Class.forName(JDBC_DRIVER_NAME);
	//create or get a Connection
	connection = DriverManager.getConnection(JDBC_URL,DB_USER_NAME, DB_PASSWORD);
	if (connection != null) {
            
	} else {
            JOptionPane.showMessageDialog(this, DB_INVALID);
	}
	return connection;
    }
}
